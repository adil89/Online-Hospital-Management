//------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated from a template.
//
//    Manual changes to this file may cause unexpected behavior in your application.
//    Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace DAL
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Objects;
    using System.Data.Objects.DataClasses;
    using System.Linq;
    
    public partial class drchronoEntities : DbContext
    {
        public drchronoEntities()
            : base("name=drchronoEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public DbSet<accounthistory> accounthistories { get; set; }
        public DbSet<loginuser> loginusers { get; set; }
        public DbSet<device> devices { get; set; }
        public DbSet<UserActivation> UserActivations { get; set; }
        public DbSet<Doctoruser> Doctorusers { get; set; }
        public DbSet<AvailableColumnTime> AvailableColumnTimes { get; set; }
        public DbSet<BookedTime> BookedTimes { get; set; }
        public DbSet<DoctorRoom> DoctorRooms { get; set; }
        public DbSet<SeeDoctorNow> SeeDoctorNows { get; set; }
        public DbSet<PendingAppointment> PendingAppointments { get; set; }
        public DbSet<ApprovedAppointment> ApprovedAppointments { get; set; }
    
        public virtual ObjectResult<getAppointments_Result> getAppointments(string dateTime, string patientId)
        {
            var dateTimeParameter = dateTime != null ?
                new ObjectParameter("DateTime", dateTime) :
                new ObjectParameter("DateTime", typeof(string));
    
            var patientIdParameter = patientId != null ?
                new ObjectParameter("patientId", patientId) :
                new ObjectParameter("patientId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<getAppointments_Result>("getAppointments", dateTimeParameter, patientIdParameter);
        }
    
        public virtual ObjectResult<GetFutureAvailableAppointments_Result> GetFutureAvailableAppointments(string dateTime, Nullable<int> providerID)
        {
            var dateTimeParameter = dateTime != null ?
                new ObjectParameter("DateTime", dateTime) :
                new ObjectParameter("DateTime", typeof(string));
    
            var providerIDParameter = providerID.HasValue ?
                new ObjectParameter("ProviderID", providerID) :
                new ObjectParameter("ProviderID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetFutureAvailableAppointments_Result>("GetFutureAvailableAppointments", dateTimeParameter, providerIDParameter);
        }
    
        public virtual int getpass(string email, ObjectParameter pass)
        {
            var emailParameter = email != null ?
                new ObjectParameter("email", email) :
                new ObjectParameter("email", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("getpass", emailParameter, pass);
        }
    
        public virtual ObjectResult<GetPastAppointments_Result> GetPastAppointments(string dateTime, string patientId, string status)
        {
            var dateTimeParameter = dateTime != null ?
                new ObjectParameter("DateTime", dateTime) :
                new ObjectParameter("DateTime", typeof(string));
    
            var patientIdParameter = patientId != null ?
                new ObjectParameter("patientId", patientId) :
                new ObjectParameter("patientId", typeof(string));
    
            var statusParameter = status != null ?
                new ObjectParameter("status", status) :
                new ObjectParameter("status", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetPastAppointments_Result>("GetPastAppointments", dateTimeParameter, patientIdParameter, statusParameter);
        }
    
        public virtual int Signin(string email, string pass, ObjectParameter patientid)
        {
            var emailParameter = email != null ?
                new ObjectParameter("email", email) :
                new ObjectParameter("email", typeof(string));
    
            var passParameter = pass != null ?
                new ObjectParameter("pass", pass) :
                new ObjectParameter("pass", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Signin", emailParameter, passParameter, patientid);
        }
    
        public virtual ObjectResult<GetMyFutureAppointments_Result> GetMyFutureAppointments(string dateTime, Nullable<int> providerID)
        {
            var dateTimeParameter = dateTime != null ?
                new ObjectParameter("DateTime", dateTime) :
                new ObjectParameter("DateTime", typeof(string));
    
            var providerIDParameter = providerID.HasValue ?
                new ObjectParameter("ProviderID", providerID) :
                new ObjectParameter("ProviderID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetMyFutureAppointments_Result>("GetMyFutureAppointments", dateTimeParameter, providerIDParameter);
        }
    
        public virtual ObjectResult<GetMyTodayAppointments_Result> GetMyTodayAppointments(string dateTime, Nullable<int> providerID)
        {
            var dateTimeParameter = dateTime != null ?
                new ObjectParameter("DateTime", dateTime) :
                new ObjectParameter("DateTime", typeof(string));
    
            var providerIDParameter = providerID.HasValue ?
                new ObjectParameter("ProviderID", providerID) :
                new ObjectParameter("ProviderID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetMyTodayAppointments_Result>("GetMyTodayAppointments", dateTimeParameter, providerIDParameter);
        }
    
        public virtual ObjectResult<GetPatientsInQueue_Result> GetPatientsInQueue(Nullable<int> providerID)
        {
            var providerIDParameter = providerID.HasValue ?
                new ObjectParameter("ProviderID", providerID) :
                new ObjectParameter("ProviderID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetPatientsInQueue_Result>("GetPatientsInQueue", providerIDParameter);
        }
    }
}
